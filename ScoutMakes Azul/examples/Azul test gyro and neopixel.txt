from adafruit_ble import BLERadio
from adafruit_ble.advertising.standard import ProvideServicesAdvertisement
from adafruit_ble.services.nordic import UARTService

from adafruit_bluefruit_connect.packet import Packet
from adafruit_bluefruit_connect.accelerometer_packet import AccelerometerPacket

import time
import board
import pulseio

import neopixel

pixel_pin = board.NEOPIXEL
num_pixels = 1

pixels = neopixel.NeoPixel(pixel_pin, num_pixels, brightness=0.3, auto_write=False)

RED = (255, 0, 0)
YELLOW = (255, 150, 0)
GREEN = (0, 255, 0)
CYAN = (0, 255, 255)
BLUE = (0, 0, 255)
PURPLE = (180, 0, 255)
WHITE = (255,255,255)

ble = BLERadio()
uart = UARTService()
advertisement = ProvideServicesAdvertisement(uart)

while True:
    ble.start_advertising(advertisement)
    while not ble.connected:
        pass

    # Now we're connected

    while ble.connected:
        if uart.in_waiting:
            packet = Packet.from_stream(uart)
            if isinstance(packet, AccelerometerPacket):
                x = packet.x
                y = packet.y
                #print (y)
                if x<-1.5:
						pixels.fill(RED)
						pixels.show()
						# Increase or decrease to change the speed of the solid color change.
						time.sleep(1)
                elif x>1.5:
						pixels.fill(GREEN)
						pixels.show()
						time.sleep(1)
                elif y<-1.5:
						pixels.fill(BLUE)
						pixels.show()
						time.sleep(1)
                        #time.sleep(0.01)
                        #print ("less")
                elif y>1.5:
						pixels.fill(YELLOW)
						pixels.show()
						time.sleep(1)
                        #time.sleep(0.01)
                        #print ("less")
                elif y<1.5 and y>-1.5:
						pixels.fill(WHITE)
						pixels.show()
						time.sleep(1)
                        #time.sleep(0.01)
                        #print ("less")
                elif x<1.5 and x>-1.5:
						pixels.fill(WHITE)
						pixels.show()
						time.sleep(1)
                        #time.sleep(0.01)
                        #print ("less")